#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2009 Neil Wallace. All rights reserved.
# This program or module is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 2 of the License, or
# version 3 of the License, or (at your option) any later version. It is
# provided for educational purposes and is distributed in the hope that
# it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
# the GNU General Public License for more details.

'''
this module puts the "openmolar" modules onto the python path,
and starts the gui
'''

import sys,os,hashlib,time
from PyQt4 import QtGui,QtCore
from xml.dom import minidom

class LoginError(Exception):pass

def main(app):
    wkdir=os.path.dirname(os.getcwd())
    sys.path.append(wkdir)
    from openmolar.settings import localsettings
    from openmolar.qt4gui import Ui_startscreen

    uninitiated=True

    def autoreception(arg):    #arg is a QString
        if arg.toLower()=="rec":
            dl.reception_radioButton.setChecked(True)


    if not os.path.exists(localsettings.cflocation):
        message='''
<center>This appears to be your first running of openMolar<br />
Before you run this application ,<br />
You need to set up a settings file.<br />
So that openmolar knows where your mysql server resides<br />
If you do not have a database, you will be prompted to create one<br /><br/>
Purely because settings are saved in a system directory.<br />
You may be prompted to raise privileges on some systems<br /><br />
Are you ready to proceed?</center>'''

        result=QtGui.QMessageBox.question(None,"First Run",
        message,
        QtGui.QMessageBox.Yes,QtGui.QMessageBox.No)

        if result == QtGui.QMessageBox.Yes:
            try:
                import subprocess
                if os.getuid()==0:
                    #-- already root!
                    p=subprocess.Popen(['./firstRun.py'])
                else:
                    if os.environ.has_key("GDM_LANG"):
                        p=subprocess.Popen(['gksu','./firstRun.py'])
                    elif os.environ.has_key("KDE_FULL_SESSION"):
                        try:
                            p=subprocess.Popen(['kdesu','./firstRun.py'])
                        except:
                            #-- kubuntu doesn't use kdesu!!! ?????
                            p=subprocess.Popen(['kdesudo','./firstRun.py'])
                    else:
                        #-- don't know the desktop variant..
                        #-- and could be windows
                        #-- and not need root anyway?
                        p=subprocess.Popen(['./firstRun.py'])
                result=p.wait()
            except:
                QtGui.QMessageBox.information(None,"error",
                "Unable to get superuser permisions")
    try:
        d=minidom.parse(localsettings.cflocation)
        sysPassword=d.getElementsByTagName("system_password")[0].firstChild.data
    except:
        print "still no settings... quitting politely"
        QtGui.QMessageBox.information(None,"Unable to Run OpenMolar",
        "Good Bye!")

        app.closeAllWindows()
        sys.exit("unable to run - openMolar needs a settings file")

    Dialog = QtGui.QDialog()
    dl = Ui_startscreen.Ui_Dialog()
    dl.setupUi(Dialog)
    QtCore.QObject.connect(dl.user1_lineEdit,
                    QtCore.SIGNAL("textEdited (const QString&)"),autoreception)


    while True:
        if Dialog.exec_():
            try:
                pword="diqug_ADD_SALT_3i2some"+str(dl.password_lineEdit.text())
                #-- hash the salted password (twice!) and compare to the value
                #-- stored in /etc/openmolar/openmolar.conf (linux)
                s=hashlib.md5(hashlib.sha1(pword).hexdigest()).hexdigest()
                if s != sysPassword:##end password check##
                    raise LoginError
                if uninitiated:
                    #-- user has entered the correct password
                    #-- so now we connect to the mysql database for the 1st time
                    #-- I do it this way so that anyone sniffing the network
                    #-- won't see the mysql password until this point
                    #-- this could and should possibly still be improved upon
                    #-- maybe by using an ssl connection to the server.
                    localsettings.initiate(False)
                    uninitiated=False

                u1=dl.user1_lineEdit.text().toUpper()
                #toUpper is a method of QString
                u2=dl.user2_lineEdit.text().toUpper()

                #-- localsettings module now has user variables.
                #-- allowed_logins in a list of practice staff.
                if not u1 in localsettings.allowed_logins:
                    raise LoginError
                if u2!="" and not u2 in localsettings.allowed_logins:
                    raise LoginError

                #-- set a variable to allow the main program to run
                localsettings.successful_login=True
                if dl.reception_radioButton.isChecked():
                    localsettings.station="reception"

                localsettings.setOperator(str(u1), str(u2))

                from openmolar.qt4gui import maingui
                sys.exit(maingui.main(sys.argv))

            except LoginError:
                QtGui.QMessageBox.warning(Dialog,
                "Login Error","Incorrect<br />User/password<br />\
                combination!<br />Please Try Again.")
        else:
            break
    app.closeAllWindows()

if __name__=="__main__":
    print "starting openMolar"
    app=QtGui.QApplication(sys.argv)

    main(app)
